// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaGinastica.DomainModel;

namespace SistemaGinastica.DomainModel.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("fl_active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("txt_address")
                        .HasMaxLength(250);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("dt_birth");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("txt_cpf")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("txt_name")
                        .HasMaxLength(150);

                    b.Property<int>("PlanType")
                        .HasColumnName("cd_plan_type");

                    b.Property<float>("PlanValue")
                        .HasColumnName("num_plan_value");

                    b.Property<string>("Registration")
                        .HasColumnName("txt_registration")
                        .HasMaxLength(150);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnName("txt_rg")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.ExamAnamnesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.ToTable("exam_anamnesis");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.ExamErgonometric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.ToTable("exam_ergonometric");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.ExamErgonometricStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.ToTable("exam_ergonometric_step");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.ExamSkinFold", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.ToTable("exam_skin_fold");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.GroupClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("fl_active");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTime>("EndHour")
                        .HasColumnName("hr_end");

                    b.Property<long?>("IdInstructor")
                        .HasColumnName("id_instructor");

                    b.Property<DateTime>("InitHour")
                        .HasColumnName("hr_init");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("txt_name")
                        .HasMaxLength(250);

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnName("txt_room")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.HasIndex("IdInstructor");

                    b.ToTable("group_class");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.GroupClassWeekDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<long>("IdGroupClass")
                        .HasColumnName("id_group_class");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.Property<int>("WeekDay")
                        .HasColumnName("cd_week_day");

                    b.HasKey("Id");

                    b.HasIndex("IdGroupClass");

                    b.ToTable("group_class_week_day");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Instructor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("fl_active");

                    b.Property<bool>("AuthorizedGroupClass")
                        .HasColumnName("fl_authorized_group_class");

                    b.Property<bool>("AuthorizedMuscle")
                        .HasColumnName("fl_authorized_muscle");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("txt_cpf")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("txt_name")
                        .HasMaxLength(150);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnName("txt_rg")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.ToTable("instrutor");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnName("dt_expected");

                    b.Property<long>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<DateTimeOffset?>("PaymentDate")
                        .HasColumnName("dt_payment");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnName("dt_period_end");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnName("dt_period_start");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.Property<float>("Value")
                        .HasColumnName("num_value");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.PhysicalEvaluation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<long>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<long>("IdUser")
                        .HasColumnName("id_user");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdUser");

                    b.ToTable("physical_evaluation");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Presence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<long>("IdCustomer")
                        .HasColumnName("id_customer");

                    b.Property<long>("IdGroupClass")
                        .HasColumnName("id_group_class");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdGroupClass");

                    b.ToTable("presence");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("txt_cpf")
                        .HasMaxLength(20);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<string>("HashPassword")
                        .HasColumnName("txt_hash_password")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("txt_name")
                        .HasMaxLength(150);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnName("txt_rg")
                        .HasMaxLength(20);

                    b.Property<string>("Salt")
                        .HasColumnName("txt_salt")
                        .HasMaxLength(250);

                    b.Property<int>("Type")
                        .HasColumnName("cd_type");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("txt_username")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Vacation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnName("dt_create");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("dt_end");

                    b.Property<long>("IdPayment")
                        .HasColumnName("id_payment");

                    b.Property<DateTime>("InitDate")
                        .HasColumnName("dt_init");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnName("dt_update");

                    b.HasKey("Id");

                    b.HasIndex("IdPayment");

                    b.ToTable("vacation");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.GroupClass", b =>
                {
                    b.HasOne("SistemaGinastica.DomainModel.Entities.Instructor", "Instructor")
                        .WithMany("GroupClassList")
                        .HasForeignKey("IdInstructor");
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.GroupClassWeekDay", b =>
                {
                    b.HasOne("SistemaGinastica.DomainModel.Entities.GroupClass", "GroupClass")
                        .WithMany("WeekDayList")
                        .HasForeignKey("IdGroupClass")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Payment", b =>
                {
                    b.HasOne("SistemaGinastica.DomainModel.Entities.Customer", "Customer")
                        .WithMany("PaymentList")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.PhysicalEvaluation", b =>
                {
                    b.HasOne("SistemaGinastica.DomainModel.Entities.Customer", "Customer")
                        .WithMany("PhysicalEvaluationList")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SistemaGinastica.DomainModel.Entities.User", "User")
                        .WithMany("PhysicalEvaluationList")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Presence", b =>
                {
                    b.HasOne("SistemaGinastica.DomainModel.Entities.Customer", "Customer")
                        .WithMany("PresenceList")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SistemaGinastica.DomainModel.Entities.GroupClass", "GroupClass")
                        .WithMany("PresenceList")
                        .HasForeignKey("IdGroupClass")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SistemaGinastica.DomainModel.Entities.Vacation", b =>
                {
                    b.HasOne("SistemaGinastica.DomainModel.Entities.Payment", "Payment")
                        .WithMany("VacationList")
                        .HasForeignKey("IdPayment")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
